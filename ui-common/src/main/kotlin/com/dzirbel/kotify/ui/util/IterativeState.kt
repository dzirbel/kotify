package com.dzirbel.kotify.ui.util

import androidx.compose.runtime.Composable
import androidx.compose.runtime.produceState
import androidx.compose.runtime.remember
import kotlinx.coroutines.delay

/**
 * Returns the value iteratively generated by [generate], which returns the next value to expose and a delay in
 * milliseconds before it should be called to generate the next value.
 */
@Composable
fun <T> iterativeState(key: Any? = null, generate: () -> Pair<T, Long>): T {
    val (initialValue, initialDelay) = remember(key, generate) { generate() }

    return produceState(initialValue = initialValue, key1 = key, key2 = generate) {
        // produceState does not update its initialValue when the key changes (i.e. it is remembered{} without a key),
        // so we need to re-emit it here to avoid waiting for the initial delay when the key changes
        value = initialValue
        delay(initialDelay)

        while (true) {
            val (result, delay) = generate()

            value = result

            delay(delay)
        }
    }
        .value
}
